diff --git a/Dimensions.py b/Dimensions.py
index 69e1f06..62cd761 100644
--- a/Dimensions.py
+++ b/Dimensions.py
@@ -60,6 +60,7 @@ from constants import (DECKSIZE, PRODUCT, HASH, ROMAN, WORD, CHINESE, MAYAN,
 
 from game import Game
 
+from sugarapp.helpers import PrimaryMonitor
 from sugarapp.widgets import SugarCompatibleActivity
 
 MODE = 'pattern'
@@ -449,10 +450,10 @@ class Dimensions(SugarCompatibleActivity):
         NUMBER_C_BUTTONS[LINES] = self.lines_button
 
     def _configure_cb(self, event):
-        self._vbox.set_size_request(Gdk.Screen.width(), Gdk.Screen.height())
+        self._vbox.set_size_request(PrimaryMonitor.width(), PrimaryMonitor.height())
         self._vbox.show()
 
-        if Gdk.Screen.width() < Gdk.Screen.height():
+        if PrimaryMonitor.width() < PrimaryMonitor.height():
             for sep in self._sep:
                 sep.hide()
         else:
@@ -562,13 +563,13 @@ class Dimensions(SugarCompatibleActivity):
         self.set_canvas(self.fixed)
 
         self._vbox = Gtk.VBox(False, 0)
-        self._vbox.set_size_request(Gdk.Screen.width(), Gdk.Screen.height())
+        self._vbox.set_size_request(PrimaryMonitor.width(), PrimaryMonitor.height())
         self.fixed.put(self._vbox, 0, 0)
         self._vbox.show()
 
         self._canvas = Gtk.DrawingArea()
-        self._canvas.set_size_request(int(Gdk.Screen.width()),
-                                      int(Gdk.Screen.height()))
+        self._canvas.set_size_request(int(PrimaryMonitor.width()),
+                                      int(PrimaryMonitor.height()))
         self._canvas.show()
         self.show_all()
         self._vbox.pack_end(self._canvas, True, True, 0)
@@ -707,8 +708,8 @@ class Dimensions(SugarCompatibleActivity):
             help_buttons[name] = button
         help_windows[name] = Gtk.ScrolledWindow()
         help_windows[name].set_size_request(
-            int(Gdk.Screen.width() / 3),
-            Gdk.Screen.height() - style.GRID_CELL_SIZE * 3)
+            int(PrimaryMonitor.width() / 3),
+            PrimaryMonitor.height() - style.GRID_CELL_SIZE * 3)
         help_windows[name].set_policy(Gtk.PolicyType.NEVER,
                                       Gtk.PolicyType.AUTOMATIC)
         help_windows[name].add_with_viewport(help_palettes[name])
diff --git a/game.py b/game.py
index b487469..421502b 100644
--- a/game.py
+++ b/game.py
@@ -56,6 +56,8 @@ from gencards import (generate_match_card, generate_frowny_shape,
                       generate_label, generate_background,
                       generate_new_smiley_card, generate_new_game_card)
 
+from sugarapp.helpers import PrimaryMonitor
+
 CURSOR = 'â–ˆ'
 
 BACKGROUND_LAYER = 0
@@ -141,8 +143,8 @@ class Game():
         self._canvas.connect('event', self.__event_cb)
         self._canvas.connect('draw', self.__draw_cb)
 
-        self._width = Gdk.Screen.width()
-        self._height = Gdk.Screen.height()
+        self._width = PrimaryMonitor.width()
+        self._height = PrimaryMonitor.height()
         if self._width < self._height:
             self.portrait = True
             self._scale = 0.67 * self._width / (CARD_HEIGHT * 5.5)
@@ -204,21 +206,21 @@ class Game():
 
         self.backgrounds = []
         if self.portrait:
-            width = Gdk.Screen.height()
-            height = Gdk.Screen.width()
+            width = PrimaryMonitor.height()
+            height = PrimaryMonitor.width()
         else:
-            width = Gdk.Screen.width()
-            height = Gdk.Screen.height()
+            width = PrimaryMonitor.width()
+            height = PrimaryMonitor.height()
         # generate landscape background
         string = generate_background(width, height)
         self.backgrounds.append(Sprite(
             self._sprites, 0, 0, svg_str_to_pixbuf(string, width, height)))
         if self.portrait:
-            width = Gdk.Screen.width()
-            height = Gdk.Screen.height()
+            width = PrimaryMonitor.width()
+            height = PrimaryMonitor.height()
         else:
-            width = Gdk.Screen.height()
-            height = Gdk.Screen.width()
+            width = PrimaryMonitor.height()
+            height = PrimaryMonitor.width()
         self.backgrounds[-1].type = 'background'
 
         # generate portrait background
@@ -271,7 +273,7 @@ class Game():
         self._label_time = Card()
         self._label_time.create(generate_label(size, LABELH * 4),
                                 sprites=self._sprites)
-        self._label_time.spr.move((Gdk.Screen.width() - size - LABELH, LABELH))
+        self._label_time.spr.move((PrimaryMonitor.width() - size - LABELH, LABELH))
         self._label_time.spr.set_label_attributes(24, horiz_align="right")
         self._label_time.spr.type = 'label'
 
@@ -289,16 +291,16 @@ class Game():
         Gdk.Screen.get_default().connect('size-changed', self._configure_cb)
 
     def _smiley_xy(self):
-        x = int(Gdk.Screen.width() / 2) - self._card_width + DEFAULT_SPACING
-        y = int(Gdk.Screen.height() / 2) - self._card_height - \
+        x = int(PrimaryMonitor.width() / 2) - self._card_width + DEFAULT_SPACING
+        y = int(PrimaryMonitor.height() / 2) - self._card_height - \
             DEFAULT_SPACING * 2
         return ((x, y))
 
     def _configure_cb(self, event):
         self.grid.stop_animation = True
 
-        self._width = Gdk.Screen.width()
-        self._height = Gdk.Screen.height()
+        self._width = PrimaryMonitor.width()
+        self._height = PrimaryMonitor.height()
 
         if self._width < self._height:
             self.portrait = True
@@ -310,7 +312,7 @@ class Game():
             self.backgrounds[0].set_layer(BACKGROUND_LAYER)
 
         size = min(self._width, self._height)
-        self._label_time.spr.move((Gdk.Screen.width() - size - LABELH, LABELH))
+        self._label_time.spr.move((PrimaryMonitor.width() - size - LABELH, LABELH))
 
         self.grid.rotate(self._width, self._height)
 
@@ -1744,7 +1746,7 @@ class Game():
     def _make_number_type_buttons(self):
         from sugar3.activity import activity
 
-        size = int(110 * Gdk.Screen.width() / 1200.)
+        size = int(110 * PrimaryMonitor.width() / 1200.)
 
         n = len(NUMBER_STYLES_C)
         self._number_type_c_buttons = []
@@ -1858,7 +1860,7 @@ class Game():
     def _make_card_type_buttons(self):
         from sugar3.activity import activity
 
-        size = int(220 * Gdk.Screen.width() / 1200.)
+        size = int(220 * PrimaryMonitor.width() / 1200.)
         n = len(CARD_STYLES)
 
         self._card_type_buttons = []
@@ -1895,8 +1897,8 @@ class Game():
         return sorted(help_files)
 
     def score_chart(self, *args):
-        h = int(650 * Gdk.Screen.height() / 900.)
-        w = int(550 * Gdk.Screen.width() / 1200.)
+        h = int(650 * PrimaryMonitor.height() / 900.)
+        w = int(550 * PrimaryMonitor.width() / 1200.)
         self._stop_help_on_click = False
 
         chart_path = self._generate_scorechart()
@@ -1988,8 +1990,8 @@ class Game():
             self.backgrounds[0].set_layer(SMILE_LAYER)
 
         if len(self._help) == 0:
-            h = int(650 * Gdk.Screen.height() / 900.)
-            w = int(550 * Gdk.Screen.width() / 1200.)
+            h = int(650 * PrimaryMonitor.height() / 900.)
+            w = int(550 * PrimaryMonitor.width() / 1200.)
             for help_file in self._get_help_files():
                 pixbuf = GdkPixbuf.Pixbuf.new_from_file_at_size(
                     help_file, w, h)
@@ -2037,8 +2039,8 @@ class Game():
         level2 = []
         level3 = []
 
-        h = int(650 * Gdk.Screen.height() / 900.)
-        w = int(550 * Gdk.Screen.width() / 1200.)
+        h = int(650 * PrimaryMonitor.height() / 900.)
+        w = int(550 * PrimaryMonitor.width() / 1200.)
 
         total_games = 1
         all_numbers = []
diff --git a/helpbutton.py b/helpbutton.py
index 0ae74ad..6a9d038 100644
--- a/helpbutton.py
+++ b/helpbutton.py
@@ -28,6 +28,8 @@ from sugar3.graphics.toolbutton import ToolButton
 from sugar3.graphics.icon import Icon
 from sugar3.graphics import style
 
+from sugarapp.helpers import PrimaryMonitor
+
 help_windows = {}
 help_buttons = {}
 
@@ -87,7 +89,7 @@ class HelpButton(Gtk.ToolItem):
 def add_section(help_box, section_text, icon=None):
     ''' Add a section to the help palette. From helpbutton.py by
     Gonzalo Odiard '''
-    max_text_width = int(Gdk.Screen.width() / 3) - 20
+    max_text_width = int(PrimaryMonitor.width() / 3) - 20
     hbox = Gtk.HBox()
     label = Gtk.Label()
     label.set_use_markup(True)
@@ -109,7 +111,7 @@ def add_section(help_box, section_text, icon=None):
 def add_paragraph(help_box, text, icon=None):
     ''' Add an entry to the help palette. From helpbutton.py by
     Gonzalo Odiard '''
-    max_text_width = int(Gdk.Screen.width() / 3) - 20
+    max_text_width = int(PrimaryMonitor.width() / 3) - 20
     hbox = Gtk.HBox()
     label = Gtk.Label(label=text)
     label.set_justify(Gtk.Justification.LEFT)
